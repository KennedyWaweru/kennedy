package kentech.com.kidfinder;

import android.Manifest;
import android.annotation.TargetApi;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Camera;
import android.graphics.drawable.BitmapDrawable;
import android.media.Image;
import android.net.Uri;
import android.os.Build;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.AsyncHttpClient;
import com.loopj.android.http.AsyncHttpResponseHandler;
import com.loopj.android.http.RequestParams;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Calendar;

import cz.msebera.android.httpclient.Header;

public class LostActivity extends AppCompatActivity {
 EditText edtName, edtAge,edtDescription,edtParentName,edtContact;
    private Uri fileUri;
    Uri selectedImage;
    Button btpic;//btnup
    Bitmap photo;
    String picturePath="";

    TextView tvResult;

    private RadioButton rbMale;
    ProgressBar bar;
    Spinner spin;
    private int day;
    private int year;
    private int month;
    private Button btnSetDate;
    String mahali="";
   // public RadioButton rbMale;
    final int DATE_DIALOG_ID=999;
    String[] location={"Nairobi","Mombasa","Kisumu","Garissa","Nakuru","Eldoret","Thika","Malindi","Lamu","Kiambu","Wajir"};



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_lost);
        getSupportActionBar().setTitle("I LOST A KID");



        setCurrentDateOnView();
        addListenerOnButton();


        edtName=(EditText)findViewById(R.id.edtName);
        ///edtGender= (EditText) findViewById(R.id.edtGender);
        edtAge= (EditText) findViewById(R.id.edtAge);

        edtDescription= (EditText) findViewById(R.id.edtDescription);
        edtParentName=(EditText)findViewById(R.id.edtParentName);
        edtContact= (EditText) findViewById(R.id.edtContact);
        rbMale= (RadioButton) findViewById(R.id.rbMale);
        //rbFemale= (RadioButton) findViewById(R.id.rbFmale);
        bar= (ProgressBar) findViewById(R.id.pbSubmit);
       // Bitmap img=(BitmapDrawable) imageToUpload.
        btpic= (Button) findViewById(R.id.clipic);
        btpic.setOnClickListener(new View.OnClickListener(){
            public void onClick(View v){
                //clickPic();
                //showFileChooser();
                selectImage();
            }
        });
        spin= (Spinner) findViewById(R.id.spinnerLocation);
        ArrayAdapter<String> adapter=new ArrayAdapter<String>(this, R.layout.support_simple_spinner_dropdown_item, location);
        spin.setAdapter(adapter);
        adapter.setDropDownViewResource(R.layout.support_simple_spinner_dropdown_item);
        spin.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                 mahali=location[position];

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
    }
    public void submit(View v){
       String name=edtName.getText().toString();
        //String gender=edtGender.getText().toString();
        String age=edtAge.getText().toString();
        String date=new String(new StringBuilder().append(month+1).append("-").append(day).append("-").append(year).append("  "));
        String description=edtDescription.getText().toString();
        String parentName=edtParentName.getText().toString();
        String contact=edtContact.getText().toString();
        //String gender=rbMale.isSelected()?"Male":"Female";
        String gender=rbMale.isChecked()?"Male":"Female";
        if (name.isEmpty()|| gender.isEmpty()|| age.isEmpty()||date.isEmpty()||  description.isEmpty()|| parentName.isEmpty()|| contact.isEmpty()){
            Toast.makeText(this,"PLEASE FILL IN ALL THE INFO", Toast.LENGTH_LONG).show();
        }
        else {
            String url="http://www.apphive.co.ke/kidfinder/insertLost.php";
            //nimemaliza
            RequestParams params=new RequestParams();
            params.put("name",name);
            params.put("gender",gender);
            params.put("age",age);
            params.put("date",date);
            params.put("description",description);
            params.put("parent_name",parentName);
            params.put("parent_contact",contact);
            params.put("location",mahali);

            try {
                if(!picturePath.isEmpty() || picturePath!=null) {
                    File picha = new File(picturePath);
                    params.put("image", picha);
                   bar.setVisibility(View.VISIBLE);
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                Log.d("DATA","Error with images");
            }

            AsyncHttpClient client=new AsyncHttpClient();
            client.post(url, params, new AsyncHttpResponseHandler() {
                @Override
                public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
                  String data=new String(responseBody);
                    Toast.makeText(getApplicationContext(),data,Toast.LENGTH_LONG).show();
                    bar.setVisibility(View.INVISIBLE);
                }

                @Override
                public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable error) {
                 Toast.makeText(getApplicationContext(), "Something bad has happenned. Make sure you are connected to the net", Toast.LENGTH_LONG).show();
                    bar.setVisibility(View.INVISIBLE);
                }
            });

        }
    }
    public void showFound(View v){
        Intent x=new Intent(this, FoundGallery.class);
        startActivity(x);
    }




    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode==10 ){
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED){
               /* private void clickPic(){
                    if (getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA)){
                        //opening the phone camera
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                            if (checkSelfPermission(Manifest.permission.CAMERA)!=PackageManager.PERMISSION_GRANTED){
                                requestPermissions(new String[]{Manifest.permission.CAMERA},10);
                            }
                        }

                        Intent x=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                        x.putExtra(MediaStore.EXTRA_OUTPUT,fileUri );
                        startActivityForResult(x,100);
                    }
                    else {
                        Toast.makeText(this,"Camera Not supported", Toast.LENGTH_LONG).show();
                    }
                }*/
            }
            else {Toast.makeText(this,"I am thinking of a solution",Toast.LENGTH_SHORT).show();}
        }
    }
    private void showFileChooser(){
        Intent photoChooserIntent=new Intent(Intent.ACTION_PICK);
        photoChooserIntent.setType("image/*");
        startActivityForResult(photoChooserIntent,1);
    }


    private void selectImage(){
        final CharSequence[] items={"Take Photo","Choose From Library","cancel"};
        AlertDialog.Builder builder=new AlertDialog.Builder(LostActivity.this);
        builder.setTitle("Add Photo");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            @TargetApi(Build.VERSION_CODES.M)
            @Override
            public void onClick(DialogInterface dialog, int item) {
                if (items[item].equals("Take Photo")){
                    //clickPic();
                    /*Intent x=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
                    x.putExtra(MediaStore.EXTRA_OUTPUT,fileUri );
                    startActivityForResult(x,100);*/
                }
                else if (items[item].equals("Choose From Library")){
                    Intent photoChooserIntent=new Intent(Intent.ACTION_PICK);
                    photoChooserIntent.setType("image/*");
                    startActivityForResult(photoChooserIntent,1);
                }
                else {
                    dialog.dismiss();
                }
            }
        });
        builder.show();
    }

    protected void onActivityResult(int requestCode, int resultCode, Intent data){
        if (requestCode == 100 && resultCode==RESULT_OK){
            selectedImage=data.getData();
            photo= (Bitmap) data.getExtras().get("data");

            //cursor to get image uri to display
            String[] filePathColumn={MediaStore.Images.Media.DATA};
            Log.d("PIC_PATH",selectedImage.toString());
            try {
                Cursor cursor=getContentResolver().query(selectedImage,filePathColumn, null, null,null);
                cursor.moveToFirst();
                int columnIndex=cursor.getColumnIndex(filePathColumn[0]);
                picturePath=cursor.getString(columnIndex);
                cursor.close();

                Bitmap photo= (Bitmap) data.getExtras().get("data");
                ImageView imageView= (ImageView) findViewById(R.id.imageViewPreview);
                imageView.setImageBitmap(Bitmap.createScaledBitmap(photo,650,650,false));
                Toast.makeText(getApplicationContext(),picturePath,Toast.LENGTH_SHORT).show();

            }catch (NullPointerException e)
            {
                e.printStackTrace();
            }
        }
        else if (requestCode==1 && resultCode==RESULT_OK){

            selectedImage=data.getData();
            String[] filePathColumn= {MediaStore.Images.Media.DATA};
            Cursor cursor=getContentResolver().query(selectedImage,filePathColumn,null,null,null);
            cursor.moveToFirst();
            int columnIndex=cursor.getColumnIndex(filePathColumn[0]);
            picturePath=cursor.getString(columnIndex);
            //picturePath=cursor.getString(columnIndex);
            cursor.close();
            Bitmap bMap=BitmapFactory.decodeFile(picturePath);
            ImageView imageView= (ImageView) findViewById(R.id.imageViewPreview);
            imageView.setImageBitmap(Bitmap.createScaledBitmap(bMap,650,650,false));
        }
    }
    private void setCurrentDateOnView(){
        tvResult= (TextView) findViewById(R.id.dateResult);
        Calendar c=Calendar.getInstance();
        year=c.get(Calendar.YEAR);
        month=c.get(Calendar.MONTH);
        day=c.get(Calendar.DAY_OF_MONTH);
        tvResult.setText(new StringBuilder().append(month+1).append("-").append(day).append("-").append(year).append("  "));
    }
    private void addListenerOnButton(){
        btnSetDate= (Button) findViewById(R.id.buttonSetDate);
        btnSetDate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                showDialog(DATE_DIALOG_ID);

            }
        });

    }
    protected Dialog onCreateDialog(int id){
        switch (id){
            case  DATE_DIALOG_ID:
                //set date picker dialog at current date
                return new DatePickerDialog(this,  datePickerListener,year,month,day );
        }
        return null;
    }
    private DatePickerDialog.OnDateSetListener datePickerListener=new DatePickerDialog.OnDateSetListener(){
        //when the dialog is closed the following method will be called
        public void onDateSet(DatePicker view,int selectedYear, int selectedMonth, int selectedDay){
            year=selectedYear;
            month=selectedMonth;
            day=selectedDay;
            //set the selected date to appear on the text view
            tvResult.setText(new StringBuilder().append(month+1).append("-").append(day).append("-").append(year).append("  "));
        }
    };
}
